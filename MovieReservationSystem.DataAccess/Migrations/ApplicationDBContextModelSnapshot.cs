// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieReservationSystem.DataAccess.Data;

#nullable disable

namespace MovieReservationSystem.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MovieReservationSystem.Model.Models.Movie", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("ProductionYear")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MovieReservationSystem.Model.Models.MovieSchedule", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("StartTime")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "StartTime");

                    b.ToTable("MovieSchedules");
                });

            modelBuilder.Entity("MovieReservationSystem.Model.Models.Review", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Commnet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MovieReservationSystem.Model.Models.Seat", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<int>("TheaterID")
                        .HasColumnType("int");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("bit");

                    b.Property<int>("TicketID")
                        .HasColumnType("int");

                    b.HasKey("ID", "TheaterID");

                    b.HasIndex("TheaterID");

                    b.HasIndex("TicketID")
                        .IsUnique();

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("MovieReservationSystem.Model.Models.Theater", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeatsCount")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Theaters");
                });

            modelBuilder.Entity("MovieReservationSystem.Model.Models.TheatersSchedule", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("TheaterId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "TheaterId");

                    b.HasIndex("TheaterId");

                    b.ToTable("TheatersSchedules");
                });

            modelBuilder.Entity("MovieReservationSystem.Model.Models.Ticket", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("MovieReservationSystem.Model.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MovieReservationSystem.Model.Models.MovieSchedule", b =>
                {
                    b.HasOne("MovieReservationSystem.Model.Models.Movie", "Movie")
                        .WithMany("MovieSchedule")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieReservationSystem.Model.Models.Review", b =>
                {
                    b.HasOne("MovieReservationSystem.Model.Models.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieReservationSystem.Model.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieReservationSystem.Model.Models.Seat", b =>
                {
                    b.HasOne("MovieReservationSystem.Model.Models.Theater", "Theater")
                        .WithMany("Seats")
                        .HasForeignKey("TheaterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieReservationSystem.Model.Models.Ticket", "Ticket")
                        .WithOne("Seat")
                        .HasForeignKey("MovieReservationSystem.Model.Models.Seat", "TicketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theater");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("MovieReservationSystem.Model.Models.TheatersSchedule", b =>
                {
                    b.HasOne("MovieReservationSystem.Model.Models.Movie", "Movie")
                        .WithMany("TheatersSchedules")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieReservationSystem.Model.Models.Theater", "Theater")
                        .WithMany("TheatersSchedules")
                        .HasForeignKey("TheaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Theater");
                });

            modelBuilder.Entity("MovieReservationSystem.Model.Models.Ticket", b =>
                {
                    b.HasOne("MovieReservationSystem.Model.Models.Movie", "Movie")
                        .WithMany("Tickets")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieReservationSystem.Model.Models.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieReservationSystem.Model.Models.Movie", b =>
                {
                    b.Navigation("MovieSchedule");

                    b.Navigation("Reviews");

                    b.Navigation("TheatersSchedules");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("MovieReservationSystem.Model.Models.Theater", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("TheatersSchedules");
                });

            modelBuilder.Entity("MovieReservationSystem.Model.Models.Ticket", b =>
                {
                    b.Navigation("Seat")
                        .IsRequired();
                });

            modelBuilder.Entity("MovieReservationSystem.Model.Models.User", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
